当使用 std::thread 绑定类成员函数时，需要使用成员函数指针和对象指针来指定函数和对象。
MyClass obj;
std::thread t(&MyClass::foo, &obj, 42, "Hello, World!");
&MyClass::foo 表示成员函数指针，其中 & 表示取地址符，可以获取到 foo 函数的地址。&obj 表示对象指针，即 foo 函数的调用者。
需要注意的是，要使用 &obj 作为参数传递给 std::thread 构造函数，而不是只传递 obj。
这是因为成员函数 foo 需要访问 MyClass 对象的成员变量和成员函数，因此需要传递一个指向该对象的指针。
实际测试传参obj也可以，只是会调用复制构造函数重新构造一个对象

另外，非常重要！！！！！！
在绑定类成员函数时，需要取成员函数的地址并绑定到对象上，但是这里的 &MyClass::foo 并不是再次取地址，
而是取得成员函数的地址并同时包含对象指针，以便正确调用成员函数。
事实上，使用 &MyClass::foo 取得的是一个成员函数指针，其类型为 void (MyClass::*)(int, const std::string&)，
这里的 MyClass:: 表示成员函数所在的类，而 (int, const std::string&) 则表示成员函数的参数列表。
成员函数指针与普通函数指针有所不同，它包含了对类的指针，以便正确地调用成员函数。

再稍微解释一下具体使用这个成员函数指针来创建线程的过程。
首先，将对象指针传递给 std::thread 的构造函数，以保证该成员函数所要执行的对象是正确的。
然后，将成员函数指针传递给 std::mem_fn 函数，将其转换为可调用对象。
最后，将可调用对象作为第一个参数传递给 std::thread 的构造函数，以便执行成员函数。
