read(sockfd, buff, buff_size);       
write(sockfd, buff, buff_size);
recv(sockfd, buff, buff_size,MSG_WAITALL); //阻塞模式接收        
send(scokfd, buff, buff_size,MSG_WAITALL); //阻塞模式发送
recv(sockfd, buff, buff_size,MSG_DONTWAIT); //非阻塞模式接收        
send(scokfd, buff, buff_size,MSG_DONTWAIT); //非阻塞模式发送
recv(sockfd, buff, buff_size,0);        
send(scokfd, buff, buff_size,0);

1）尽量使用recv(,,MSG_WAITALL),read必须配合while使用，否则数据量大(240*384)时数据读不完
2）编程时写入的数据必须尽快读出，否则后面的数据将无法继续写入
3）最佳搭配如下：
        nbytes = recv(sockfd, buff, buff_size,MSG_WAITALL);
        nbytes = send(scokfd, buff, buff_size,MSG_WAITALL);
        阻塞模式是指当一个线程或进程在执行某个操作时，如果该操作被阻塞了，那么整个线程或进程会停止执行，直到被阻塞的操作完成或者失败才能继续执行。
        阻塞模式的优点是在等待网络 I/O 或者其他操作完成的过程中不会占用 CPU 资源，因此不会给系统带来过多的负担。
        然而，由于线程在等待期间不能执行其他操作，因此会导致程序响应变慢或者无响应。
        因此，在编写高并发或者实时应用程序时，使用阻塞模式可能不是最佳的选择。

为了克服阻塞模式的限制，一些高级编程语言和操作系统提供了异步和非阻塞的编程接口，这些接口允许线程在等待某个操作完成的同时，
继续执行其他任务。这些编程接口的目的是提高程序的性能和响应性。
send函数的阻塞模式是指，当一个线程调用 send 函数时，如果 socket 缓冲区已满，send 函数将会阻塞，直到有足够的空间来存储数据，并且数据已经被发送。
在这种模式下，只有当 send 函数返回时，线程才会继续执行后续代码。

阻塞模式是 send 函数的默认模式，它保证发送的数据准确无误且顺序良好。但是，当发送的数据量很大或者网络连接速度缓慢时，send 函数将会阻塞程序执行进程，导致程序响应变慢或者无响应。为了避免阻塞，我们可以使用非阻塞或者异步操作。在非阻塞模式下，当 socket 缓冲区已满时，send 函数会立即返回并返回一个 EWOULDBLOCK 或 EAGAIN 错误，而不会阻塞线程。在异步模式下，send 函数会立即返回并将发送请求加入操作队列中，线程可以继续执行后续代码。操作队列中的请求将在后台的 I/O 线程中异步发送。

在网络编程中，我们需要根据实际情况来选择 send 函数的发送模式。如果要求发送的数据安全可靠，可以选择阻塞模式；如果需要保持系统的高可用性，则可以使用非阻塞模式或异步模式。

对一个字符数组执行加一操作，实际上是将指针向后移动一个位置。
在Unix系统中，“/” 用于表示路径的分隔符。例如，如果不去掉 “/” 字符，那么打开的文件路径就会变成 “/index.html”
系统会认为“/index.html” 是从根目录开始的绝对路径，因此最终会尝试在根目录下查找该文件。
而真实的文件路径并不是从根目录开始的，因此打开文件会失败。
因此，去掉 “/” 字符后，文件路径就变成了 “index.html”，这样系统就会在当前目录下查找该文件。

fgets 和 fread 都是 C 语言中常用的文件读取函数，它们之间有以下区别：
1.读取方式不同：fgets 函数一次读取一行数据（以换行符 \n 为分隔符），而 fread 函数则按字节或按块读取数据。
2.读取数据的类型不同：fgets 函数读取文本数据并将其转换为 C 语言的字符串类型，即 char* 类型；而 fread 函数可以读取任意类型的数据，包括二进制数据。
3.读取数据的结束标志不同：fgets 函数在读取到换行符或文件末尾时停止读取，而 fread 函数在读取到指定的字节数或文件末尾时停止读取。
4.读取的字符个数不同：fgets 函数在每次调用时只能读取一行数据，而 fread 函数可以一次读取多个字节或块数据。
因此，当需要读取文本数据时，通常使用 fgets 函数，而读取二进制数据时则使用 fread 函数。fgets 函数适用于读取行格式数据，如日志文件、配置文件等；而 fread 函数适用于读取结构体、数组等数据。